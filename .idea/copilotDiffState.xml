<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/javalab/dao/StudentDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/javalab/dao/StudentDAO.java" />
              <option name="originalContent" value="package com.javalab.dao;&#10;&#10;import com.javalab.domain.Student;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import static com.javalab.connection.ConnectionDB.getConnection;&#10;&#10;// Data Access Object (DAO) for Student entity&#10;public class StudentDAO {&#10;  public List&lt;Student&gt; getAll() {&#10;    List&lt;Student&gt; students = new ArrayList&lt;&gt;();&#10;    PreparedStatement ps = null;&#10;    ResultSet rs = null;&#10;    Connection connection = getConnection();&#10;    String sql = &quot;SELECT * FROM students order by id&quot;;&#10;    try {&#10;      ps = connection.prepareStatement(sql);&#10;      rs = ps.executeQuery();&#10;      while (rs.next()) {&#10;        Student student = new Student();&#10;        student.setId(rs.getInt(&quot;id&quot;));&#10;        student.setName(rs.getString(&quot;name&quot;));&#10;        student.setLastName(rs.getString(&quot;last_name&quot;));&#10;        student.setPhoneNumber(rs.getString(&quot;phone_number&quot;));&#10;        student.setEmail(rs.getString(&quot;email&quot;));&#10;        students.add(student);&#10;      }&#10;    } catch (Exception e) {&#10;      System.out.println(&quot;Error retrieving students: &quot; + e.getMessage());&#10;    } finally {&#10;      try {&#10;        if (rs != null) rs.close();&#10;        if (ps != null) ps.close();&#10;        if (connection != null) connection.close();&#10;      } catch (Exception e) {&#10;        System.out.println(&quot;Error closing resources: &quot; + e.getMessage());&#10;      }&#10;    }&#10;    return students;&#10;  }&#10;&#10;  public boolean findById(Student student) {&#10;    PreparedStatement ps = null;&#10;    ResultSet rs = null;&#10;    Connection connection = getConnection();&#10;    String sql = &quot;SELECT * FROM students WHERE id = ?&quot;;&#10;    try {&#10;      ps = connection.prepareStatement(sql);&#10;      ps.setInt(1, student.getId());&#10;      rs = ps.executeQuery();&#10;      if (rs.next()) {&#10;        student.setName(rs.getString(&quot;name&quot;));&#10;        student.setLastName(rs.getString(&quot;last_name&quot;));&#10;        student.setPhoneNumber(rs.getString(&quot;phone_number&quot;));&#10;        student.setEmail(rs.getString(&quot;email&quot;));&#10;        return true;&#10;      } else {&#10;        System.out.println(&quot;Student not found with id: &quot; + student.getId());&#10;        return false;&#10;      }&#10;    } catch (Exception e) {&#10;      System.out.println(&quot;Error preparing statement: &quot; + e.getMessage());&#10;      return false;&#10;    } finally {&#10;      try {&#10;        if (rs != null) rs.close();&#10;        if (ps != null) ps.close();&#10;        if (connection != null) connection.close();&#10;      } catch (Exception e) {&#10;        System.out.println(&quot;Error closing resources: &quot; + e.getMessage());&#10;      }&#10;    }&#10;  }&#10;&#10;  public boolean addStudent(Student student) {&#10;    PreparedStatement ps = null;&#10;    Connection connection = getConnection();&#10;    String sql = &quot;INSERT INTO students (name, last_name, phone_number, email) VALUES (?, ?, ?, ?)&quot;;&#10;    try {&#10;      ps.setString(1, student.getName());&#10;      ps.setString(2, student.getLastName());&#10;      ps.setString(3, student.getPhoneNumber());&#10;      ps.setString(4, student.getEmail());&#10;      ps.execute();&#10;      return true;&#10;&#10;    } catch (Exception e) {&#10;      System.out.println(&quot;Error adding student: &quot; + e.getMessage());&#10;      return false;&#10;    } finally {&#10;&#10;      try {&#10;        if (ps != null) ps.close();&#10;        if (connection != null) connection.close();&#10;      } catch (Exception e) {&#10;        System.out.println(&quot;Error closing resources: &quot; + e.getMessage());&#10;      }&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.javalab.dao;&#10;&#10;import com.javalab.domain.Student;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import static com.javalab.connection.ConnectionDB.getConnection;&#10;&#10;// Data Access Object (DAO) for Student entity&#10;public class StudentDAO {&#10;  public List&lt;Student&gt; getAll() {&#10;    List&lt;Student&gt; students = new ArrayList&lt;&gt;();&#10;    PreparedStatement ps = null;&#10;    ResultSet rs = null;&#10;    Connection connection = getConnection();&#10;    String sql = &quot;SELECT * FROM students order by id&quot;;&#10;    try {&#10;      ps = connection.prepareStatement(sql);&#10;      rs = ps.executeQuery();&#10;      while (rs.next()) {&#10;        Student student = new Student();&#10;        student.setId(rs.getInt(&quot;id&quot;));&#10;        student.setName(rs.getString(&quot;name&quot;));&#10;        student.setLastName(rs.getString(&quot;last_name&quot;));&#10;        student.setPhoneNumber(rs.getString(&quot;phone_number&quot;));&#10;        student.setEmail(rs.getString(&quot;email&quot;));&#10;        students.add(student);&#10;      }&#10;    } catch (Exception e) {&#10;      System.out.println(&quot;Error retrieving students: &quot; + e.getMessage());&#10;    } finally {&#10;      try {&#10;        if (rs != null) rs.close();&#10;        if (ps != null) ps.close();&#10;        if (connection != null) connection.close();&#10;      } catch (Exception e) {&#10;        System.out.println(&quot;Error closing resources: &quot; + e.getMessage());&#10;      }&#10;    }&#10;    return students;&#10;  }&#10;&#10;  public boolean findById(Student student) {&#10;    PreparedStatement ps = null;&#10;    ResultSet rs = null;&#10;    Connection connection = getConnection();&#10;    String sql = &quot;SELECT * FROM students WHERE id = ?&quot;;&#10;    try {&#10;      ps = connection.prepareStatement(sql);&#10;      ps.setInt(1, student.getId());&#10;      rs = ps.executeQuery();&#10;      if (rs.next()) {&#10;        student.setName(rs.getString(&quot;name&quot;));&#10;        student.setLastName(rs.getString(&quot;last_name&quot;));&#10;        student.setPhoneNumber(rs.getString(&quot;phone_number&quot;));&#10;        student.setEmail(rs.getString(&quot;email&quot;));&#10;        return true;&#10;      } else {&#10;        System.out.println(&quot;Student not found with id: &quot; + student.getId());&#10;        return false;&#10;      }&#10;    } catch (Exception e) {&#10;      System.out.println(&quot;Error preparing statement: &quot; + e.getMessage());&#10;      return false;&#10;    } finally {&#10;      try {&#10;        if (rs != null) rs.close();&#10;        if (ps != null) ps.close();&#10;        if (connection != null) connection.close();&#10;      } catch (Exception e) {&#10;        System.out.println(&quot;Error closing resources: &quot; + e.getMessage());&#10;      }&#10;    }&#10;  }&#10;&#10;  public boolean addStudent(Student student) {&#10;    PreparedStatement ps = null;&#10;    Connection connection = getConnection();&#10;    String sql = &quot;INSERT INTO students (name, last_name, phone_number, email) VALUES (?, ?, ?, ?)&quot;;&#10;    try {&#10;      ps = connection.prepareStatement(sql);&#10;      ps.setString(1, student.getName());&#10;      ps.setString(2, student.getLastName());&#10;      ps.setString(3, student.getPhoneNumber());&#10;      ps.setString(4, student.getEmail());&#10;      ps.execute();&#10;      return true;&#10;    } catch (Exception e) {&#10;      System.out.println(&quot;Error adding student: &quot; + e.getMessage());&#10;      return false;&#10;    } finally {&#10;      try {&#10;        if (ps != null) ps.close();&#10;        if (connection != null) connection.close();&#10;      } catch (Exception e) {&#10;        System.out.println(&quot;Error closing resources: &quot; + e.getMessage());&#10;      }&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>